#include <stdio.h>
#include <tgbot/tgbot.h>

#include <cstdio>

#include "dataBase/dataBase.h"

struct User {
  bool isInRegistration = false;
  bool isInHomework = false;
  bool isInNotifications = false;
};

void setCommandsMenu(TgBot::Bot &bot);

int main() {
  TgBot::Bot bot("7031000270:AAFA_R8OMb_N3VZteuLNKSpBGfo9b4eVxD4");
  RegistrationDataBase registrationDataBase("registrationDataBase.txt");
  HomeWorkDataBase homeWorkGr25("–ò–£5-25–ë.txt");
  HomeWorkDataBase homeWorkGr24("–ò–£5-24–ë.txt");
  std::unordered_map<std::string, HomeWorkDataBase> homeWorkBases{{"–ò–£5-25–ë", homeWorkGr25}, {"–ò–£5-24–ë", homeWorkGr24}};
  std::unordered_map<int64_t, User> users;
  std::unordered_map<string, bool> isPressed;
  // std::unordered_map<
  
  setCommandsMenu(bot);

  bot.getEvents().onCommand("homework", [&bot, &users, &registrationDataBase, &isPressed](TgBot::Message::Ptr message) {
    if (!users[message->chat->id].isInRegistration and !users[message->chat->id].isInNotifications and !users[message->chat->id].isInHomework) {
      if (registrationDataBase.isRegistered(message->chat->id)) {
        TgBot::InlineKeyboardMarkup::Ptr keyboard(new TgBot::InlineKeyboardMarkup);

        std::vector<TgBot::InlineKeyboardButton::Ptr> row1;
        TgBot::InlineKeyboardButton::Ptr button1(new TgBot::InlineKeyboardButton);
        button1->text = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ";
        button1->callbackData = "showHomework";
        row1.push_back(button1);

        std::vector<TgBot::InlineKeyboardButton::Ptr> row2;
        TgBot::InlineKeyboardButton::Ptr button2(new TgBot::InlineKeyboardButton);
        button2->text = "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é";
        button2->callbackData = "addNoteToHomework";
        row2.push_back(button2);

        keyboard->inlineKeyboard.push_back(row1);
        keyboard->inlineKeyboard.push_back(row2);

        isPressed["showHomework"] = false;
        isPressed["addNoteToHomework"] = false;

        if (registrationDataBase.isAdmin(message->chat->id)) {
          std::vector<TgBot::InlineKeyboardButton::Ptr> row3;
          TgBot::InlineKeyboardButton::Ptr button3(new TgBot::InlineKeyboardButton);
          button3->text = "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ";
          button3->callbackData = "addHomework";
          row3.push_back(button3);

          keyboard->inlineKeyboard.push_back(row3);
          isPressed["addHomework"] = false;
        }

        bot.getApi().sendMessage(message->chat->id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", false, 0, keyboard);
        return;
      } else {
        bot.getApi().sendMessage(message->chat->id, "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register");
      }
    } else {
      bot.getApi().sendMessage(message->chat->id, "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register");
    }
  });

  bot.getEvents().onCallbackQuery([&bot, &isPressed](TgBot::CallbackQuery::Ptr query) {
    if (query->data == "showHomework" and !isPressed["showHomework"]) {
      isPressed["showHomework"] = true;
      bot.getApi().sendMessage(query->message->chat->id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É 1");
    } else if (query->data == "addNoteToHomework" and !isPressed["addNoteToHomework"]) {
      isPressed["addNoteToHomework"] = true;
      TgBot::InlineKeyboardMarkup::Ptr keyboard(new TgBot::InlineKeyboardMarkup);

      std::vector<TgBot::InlineKeyboardButton::Ptr> row1;
      TgBot::InlineKeyboardButton::Ptr button1(new TgBot::InlineKeyboardButton);
      button1->text = "–î–æ–±–∞–≤–∏—Ç—å –ª–∏—á–Ω—É—é –∑–∞–º–µ—Ç–∫—É";
      button1->callbackData = "addUserNote";
      row1.push_back(button1);

      std::vector<TgBot::InlineKeyboardButton::Ptr> row2;
      TgBot::InlineKeyboardButton::Ptr button2(new TgBot::InlineKeyboardButton);
      button2->text = "–î–æ–±–∞–≤–∏—Ç—å –æ–±—â—É—é –∑–∞–º–µ—Ç–∫—É";
      button2->callbackData = "addGlobalNote";
      row2.push_back(button2);

      keyboard->inlineKeyboard.push_back(row1);
      keyboard->inlineKeyboard.push_back(row2);

      bot.getApi().sendMessage(query->message->chat->id, "–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–∫–æ–π —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å(–æ–±—â–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º):", false, 0, keyboard);

    } else if (query->data == "addHomework" and !isPressed["addHomework"]) {
      isPressed["addHomework"] = true;
      bot.getApi().sendMessage(query->message->chat->id, "–ù–∞—à–∏—à–∏—Ç–µ –º–Ω–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏:–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:–ü—Ä–µ–¥–º–µ—Ç");
    } else if (query->data == "addUserNote") {
    } else if (query->data == "addGlobalNote") {
    }
  });

  bot.getEvents().onCommand("start", [&bot, &registrationDataBase](TgBot::Message::Ptr message) {
    bot.getApi().sendMessage(message->chat->id,
                             "–ü—Ä–∏–≤–µ—Ç! \nüëã –Ø –≠–ñ–° (–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –ñ—É—Ä–Ω–∞–ª –°—Ç—É–¥–µ–Ω—Ç–∞) ‚Äì –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É—á–µ–±–µ. \nüìö –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ: \n‚úÖ "
                             "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–∫—É—â–∏–º–∏ –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ \n‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—é —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å \n‚úÖ –ü–æ–ª—É—á–∞—Ç—å "
                             "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –∏ –æ—Ü–µ–Ω–∫–∞—Ö \n–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /register, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞—á–∞—Ç—å "
                             "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!\n–£–¥–∞—á–∏ –≤ —É—á–µ–±–µ! üöÄ");
  });

  bot.getEvents().onCommand("register", [&bot, &registrationDataBase, &users](TgBot::Message::Ptr message) {
    if (!registrationDataBase.isRegistered(message->chat->id)) {
      users[message->chat->id].isInRegistration = true;
      bot.getApi().sendMessage(message->chat->id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ì—Ä—É–ø–ø–∞:–§–ò–û:–ü–∞—Ä–æ–ª—å");
    } else {
      bot.getApi().sendMessage(message->chat->id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
    }
  });

  bot.getEvents().onNonCommandMessage([&bot, &registrationDataBase, &users](TgBot::Message::Ptr message) {
    if (users[message->chat->id].isInRegistration) {
      if (registrationDataBase.registration(message->text, message->chat->id)) {
        bot.getApi().sendMessage(message->chat->id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ");
      } else {
        bot.getApi().sendMessage(message->chat->id, "–í–∞—à–µ –§–ò–û –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ, –ª–∏–±–æ –≤–∞—à –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω");
      }
      users[message->chat->id].isInRegistration = false;
    }
  });

  bot.getEvents().onCommand("help", [&bot, &registrationDataBase, &users](TgBot::Message::Ptr message) {
    if (!users[message->chat->id].isInRegistration and !users[message->chat->id].isInNotifications and !users[message->chat->id].isInHomework) {
      if (registrationDataBase.isRegistered(message->chat->id)) {
        bot.getApi().sendMessage(message->chat->id,
                                 "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\nüìÖ /homework ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∏—Ö –¥–µ–¥–ª–∞–π–Ω—ã\nüîî "
                                 "/notifications ‚Äì –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö");
      } else {
        bot.getApi().sendMessage(message->chat->id, "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register");
      }
    }
  });

  try {
    printf("Bot username: %s\n", bot.getApi().getMe()->username.c_str());
    TgBot::TgLongPoll longPoll(bot);
    while (true) {
      printf("Long poll started\n");
      longPoll.start();
    }
  } catch (TgBot::TgException &e) {
    printf("error: %s\n", e.what());
  }
  return 0;
}

void setCommandsMenu(TgBot::Bot &bot) {
  std::vector<TgBot::BotCommand::Ptr> commands;

  TgBot::BotCommand::Ptr startCommand(new TgBot::BotCommand);
  startCommand->command = "start";
  startCommand->description = "–ù–∞—á–∞—Ç—å";

  TgBot::BotCommand::Ptr regCommand(new TgBot::BotCommand);
  regCommand->command = "register";
  regCommand->description = "–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è";

  TgBot::BotCommand::Ptr helpCommand(new TgBot::BotCommand);
  helpCommand->command = "help";
  helpCommand->description = "–ü–æ–º–æ—â—å";


  TgBot::BotCommand::Ptr homeworkCommand(new TgBot::BotCommand);
  homeworkCommand->command = "homework";
  homeworkCommand->description = "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ";

  TgBot::BotCommand::Ptr notifyCommand(new TgBot::BotCommand);
  notifyCommand->command = "notifications";
  notifyCommand->description = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è";

  commands.push_back(startCommand);
  commands.push_back(regCommand);
  commands.push_back(helpCommand);
  commands.push_back(homeworkCommand);
  commands.push_back(notifyCommand);

  bot.getApi().setMyCommands(commands);
}
#include <stdio.h>
#include <tgbot/tgbot.h>

#include "dataBase/dataBase.h"

struct User {
  bool isInRegistration = false;
  bool isInHomework = false;
  bool isInNotifications = false;
};

int main() {
  TgBot::Bot bot("7031000270:AAFA_R8OMb_N3VZteuLNKSpBGfo9b4eVxD4");
  RegistrationDataBase registrationDataBase("registrationDataBase.txt");
  HomeWorkDataBase homeWorkGr25("–ò–£5-25–ë.txt");
  HomeWorkDataBase homeWorkGr24("–ò–£5-24–ë.txt");
  std::unordered_map<std::string, HomeWorkDataBase> homeWorkBases{{"–ò–£5-25–ë", homeWorkGr25}, {"–ò–£5-24–ë", homeWorkGr24}};
  std::unordered_map<int64_t, User> users;

//   bot.getEvents().onCommand("start", [&bot](TgBot::Message::Ptr message) {
//     TgBot::InlineKeyboardMarkup::Ptr keyboard(new TgBot::InlineKeyboardMarkup);

//     // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
//     std::vector<TgBot::InlineKeyboardButton::Ptr> row1;
//     TgBot::InlineKeyboardButton::Ptr button1(new TgBot::InlineKeyboardButton);
//     button1->text = "–ì—Ä—É–ø–ø–∞ 1";
//     button1->callbackData = "group1";
//     row1.push_back(button1);

//     TgBot::InlineKeyboardButton::Ptr button2(new TgBot::InlineKeyboardButton);
//     button2->text = "–ì—Ä—É–ø–ø–∞ 2";
//     button2->callbackData = "group2";
//     row1.push_back(button2);

//     std::vector<TgBot::InlineKeyboardButton::Ptr> row2;
//     TgBot::InlineKeyboardButton::Ptr button3(new TgBot::InlineKeyboardButton);
//     button3->text = "–ì—Ä—É–ø–ø–∞ 3";
//     button3->callbackData = "group3";
//     row2.push_back(button3);

//     TgBot::InlineKeyboardButton::Ptr button4(new TgBot::InlineKeyboardButton);
//     button4->text = "–ì—Ä—É–ø–ø–∞ 4";
//     button4->callbackData = "group4";
//     row2.push_back(button4);

//     std::vector<TgBot::InlineKeyboardButton::Ptr> row3;
//     TgBot::InlineKeyboardButton::Ptr button5(new TgBot::InlineKeyboardButton);
//     button5->text = "–ì—Ä—É–ø–ø–∞ 5";
//     button5->callbackData = "group5";
//     row3.push_back(button5);

//     keyboard->inlineKeyboard.push_back(row1);
//     keyboard->inlineKeyboard.push_back(row2);
//     keyboard->inlineKeyboard.push_back(row3);

//     bot.getApi().sendMessage(message->chat->id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", false, 0, keyboard);
//   });

//   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
//   bot.getEvents().onCallbackQuery([&bot](TgBot::CallbackQuery::Ptr query) {
//     if (query->data == "group1") {
//       bot.getApi().sendMessage(query->message->chat->id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É 1");
//     } else if (query->data == "group2") {
//       bot.getApi().sendMessage(query->message->chat->id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É 2");
//     } else if (query->data == "group3") {
//       bot.getApi().sendMessage(query->message->chat->id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É 3");
//     } else if (query->data == "group4") {
//       bot.getApi().sendMessage(query->message->chat->id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É 4");
//     } else if (query->data == "group5") {
//       bot.getApi().sendMessage(query->message->chat->id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É 5");
//     }
//   });

  bot.getEvents().onCommand("start", [&bot](TgBot::Message::Ptr message) {
  bot.getApi().sendMessage(
    message->chat->id,
  "–ü—Ä–∏–≤–µ—Ç! \nüëã –Ø –≠–ñ–° (–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –ñ—É—Ä–Ω–∞–ª –°—Ç—É–¥–µ–Ω—Ç–∞) ‚Äì –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É—á–µ–±–µ. \nüìö –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ: \n‚úÖ "
  "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–∫—É—â–∏–º–∏ –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ \n‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—é —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å \n‚úÖ –ü–æ–ª—É—á–∞—Ç—å "
  "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –∏ –æ—Ü–µ–Ω–∫–∞—Ö \n–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /register, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞—á–∞—Ç—å "
  "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!\n–£–¥–∞—á–∏ –≤ —É—á–µ–±–µ! üöÄ");
  });

  bot.getEvents().onCommand("register", [&bot, &registrationDataBase, &users](TgBot::Message::Ptr message) {
    if (!registrationDataBase.isRegistered(message->chat->id)) {
      users[message->chat->id].isInRegistration = true;
      bot.getApi().sendMessage(message->chat->id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ì—Ä—É–ø–ø–∞:–§–ò–û:–ü–∞—Ä–æ–ª—å");
    } else {
      bot.getApi().sendMessage(message->chat->id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
    }
  });

  bot.getEvents().onNonCommandMessage([&bot, &registrationDataBase, &users](TgBot::Message::Ptr message) {
    if (users[message->chat->id].isInRegistration) {
      if (registrationDataBase.registration(message->text, message->chat->id)) {
        bot.getApi().sendMessage(message->chat->id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ");
      } else {
        bot.getApi().sendMessage(message->chat->id, "–í–∞—à–µ –§–ò–û –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ, –ª–∏–±–æ –≤–∞—à –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω");
      }
      users[message->chat->id].isInRegistration = false;
    }
  });

  bot.getEvents().onCommand("help", [&bot, &registrationDataBase, &users](TgBot::Message::Ptr message) {
    if (!users[message->chat->id].isInRegistration and !users[message->chat->id].isInNotifications and
        !users[message->chat->id].isInHomework) {
      if (registrationDataBase.isRegistered(message->chat->id)) {
        bot.getApi().sendMessage(
            message->chat->id,
            "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\nüìÖ /homework ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∏—Ö –¥–µ–¥–ª–∞–π–Ω—ã\nüîî "
            "/notifications ‚Äì –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –∏ "
            "–æ—Ü–µ–Ω–∫–∞—Ö\nüìù /add_note ‚Äì –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É");
      } else {
        bot.getApi().sendMessage(
            message->chat->id,
            "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register");
      }
    }
  });

  try {
    printf("Bot username: %s\n", bot.getApi().getMe()->username.c_str());
    TgBot::TgLongPoll longPoll(bot);
    while (true) {
      printf("Long poll started\n");
      longPoll.start();
    }
  } catch (TgBot::TgException& e) {
    printf("error: %s\n", e.what());
  }
  return 0;
}